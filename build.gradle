buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.bmuschko:gradle-nexus-plugin:2.3.1'
    }
}

plugins {
    id "com.github.kt3k.coveralls" version "2.8.0"
}

def projectUrl = properties['project.url']
def projectYear = properties['project.inceptionYear']
def projectScmUrl = properties['project.scm.url']
def projectScmConnection = properties['project.scm.connection']
def projectLicenseName = properties['project.license.name']
def projectLicenseUrl = properties['project.license.url']
def projectLicenseDistro = properties['project.license.distribution']
def projectIssueMgmtSystem = properties['project.issuemgmt.system']
def projectIssueMgmtUrl = properties['project.issuemgmt.url']
def projectDistMgmtId = properties['project.distributionmgmt.site.id']
def projectDistMgmtUrl = properties['project.distributionmgmt.site.url']

allprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'

    repositories {
        jcenter()
        mavenCentral()
    }

    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

subprojects {

    apply plugin: 'idea'
    apply plugin: 'checkstyle'
    apply plugin: 'com.bmuschko.nexus'

    group = properties['project.group']
    version = properties['project.version']
    sourceCompatibility = properties['project.compatibility']
    targetCompatibility = properties['project.compatibility']

    dependencies {

        //logging
        compile("org.slf4j:slf4j-api:1.7.22")
        //unit testing
        testCompile("junit:junit:4.12")
        testCompile("net.jodah:concurrentunit:0.4.2")
        //for mocking
        testCompile("org.mockito:mockito-all:1.10.19")
        testRuntime("cglib:cglib-nodep:3.1")
        testRuntime("org.objenesis:objenesis:2.1")
    }

    compileJava.doFirst {
        println "source compatibility  " + sourceCompatibility
        println "target compatibility  " + targetCompatibility
    }

    jacocoTestReport {
        additionalSourceDirs = files(sourceSets.main.allSource.srcDirs)
        sourceDirectories = files(sourceSets.main.allSource.srcDirs)
        classDirectories =  files(sourceSets.main.output)
        reports {
            xml.enabled true
            csv.enabled false
            html.destination file("${buildDir}/reports/jacoco/test/")
        }
    }

    nexus {
        sign = true
    }

    checkstyle {
        configFile = new File("${rootDir}/config/checkstyle/checkstyle.xml")
        toolVersion = '6.14'
        ignoreFailures = false
    }

    task checkstyleMainHtml {
        doLast {
            ant.xslt(in: checkstyleMain.reports.xml.destination,
                    style: file('../config/checkstyle/checkstyle.xsl'),
                    out: new File("${buildDir}/reports/checkstyle", 'main.html'))
        }
    }

    task checkstyleTestHtml {
        doLast {
            ant.xslt(in: checkstyleTest.reports.xml.destination,
                    style: file('../config/checkstyle/checkstyle.xsl'),
                    out: new File("${buildDir}/reports/checkstyle", 'test.html'))
        }
    }

    checkstyleMainHtml.dependsOn checkstyleMain
    checkstyleTestHtml.dependsOn checkstyleTest
    build.dependsOn jacocoTestReport, checkstyleMainHtml, checkstyleTestHtml
}





task jacocoRootReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
    dependsOn subprojects.test
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories =  files(subprojects.sourceSets.main.output)
    executionData = files(subprojects.jacocoTestReport.executionData)
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
        xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
        html.destination file("${buildDir}/reports/jacoco/test/")
    }
}

task alljavadoc(type: Javadoc) {
    source subprojects.sourceSets.main.allSource
    classpath = files(subprojects.sourceSets.main.compileClasspath)
    destinationDir = file("${projectDir}/docs/javadocs")
}

task copySource(type: Copy) {
    from subprojects.sourceSets.main.allSource
    into "${rootDir}/src/main/java"
}
